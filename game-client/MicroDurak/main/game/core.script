local Card = require("main.card.Card")
local CardHolder = require("main.card.CardHolder")
local Table = require("main.card.Table")
local Deck = require("main.card.Deck")
local r_utils = require("main.game.response_utils")
local ws = require("main.game.game_websocket")
local save = require("main.save_manager")
local p = require("main.param")

local STATE = {
	WAITING = 0,
	ATTACKING = 1,
	DEFENDING = 2,
}

local ROLE = {
	ATTACKER = 0,
	DEFENDER = 1,
}

local game_ui = "game:/gui"

local function log_v(message)
	msg.post("game:/debug_gui", "message", { text = message })
end

function init(self)
	print("------------------------------------Init")
	local w_width = sys.get_config_number("display.width")
	local w_height = sys.get_config_number("display.height")

	self.my_id = save.get().user_id
	self.opponent_id = nil
	self.my_role = nil

	self.state = STATE.WAITING

	self.deck = Deck:new(vmath.vector3(w_width - 150, w_height / 2, 0))

	msg.post(".", "acquire_input_focus")
	self.taken_card = nil

	self.opponent_card_holder = CardHolder:new(600, 400, false)
	self.my_card_holder = CardHolder:new(100, 400, true, function(card)
		self.taken_card = card
		self.my_card_holder:get_card(card.suit, card.rank)
	end)

	local table_pos = vmath.vector3(w_width / 2, w_height / 2, 0)
	self.table = Table:new(table_pos, 20, -40)

	ws.connect()

	-- START EVENT
	ws.subscribe(ws.EVENT_START, function(response)
		self.opponent_id = r_utils.get_opponent(response.state).id
		log_v("userid: " .. self.my_id)
		log_v("attacking_id: " .. response.state.attacking_id)
		if response.state.attacking_id == self.my_id then
			self.my_role = ROLE.ATTACKER
		else
			self.my_role = ROLE.DEFENDER
		end
		log_v(self.my_role)

		on_start(self, response)
	end)

	-- ATTACK EVENT
	ws.subscribe(ws.EVENT_ATTACK, function(response)
		if self.my_role == ROLE.ATTACKER then
			hide_action_button(self)
		else
			show_take_all_cards_button(self)
		end
		if self.table:contain_card(response.card.suit, response.card.rank) then
			return
		end
		local card = get_attacker_card(self, response.card.suit, response.card.rank)
		print(card:to_string())
		card:show()
		self.table:add_card(card)
	end)

	-- DEFEND EVENT
	ws.subscribe(ws.EVENT_DEFEND, function(response)
		local user_card = response.user_card
		local target_card = response.target_card
		if self.my_role == ROLE.DEFENDER then
			if self.table:all_card_beat_off() then
				hide_action_button(self)
			end
		end
		if self.table:contain_beat_off_card(user_card.suit, user_card.rank) then
			return
		end

		local card = get_defender_card(self, user_card.suit, user_card.rank)
		card:show()

		local i = self.table:find_card(target_card.suit, target_card.rank)
		if i ~= -1 then
			self.table:beat_off(card, i)
		end

		if self.my_role == ROLE.ATTACKER then
			if self.table:all_card_beat_off() then
				show_end_game_button(self)
			end
		end
	end)

	-- TAKE ALL CAD EVENT
	ws.subscribe(ws.EVENT_TAKE_ALL_CARDS, function(response)
		if self.my_role == ROLE.DEFENDER then
			local cards = self.table:get_all_cards()
			for _, card in ipairs(cards) do
				self.my_card_holder:add_card(card)
			end
		else
			local cards = self.table:get_all_cards()
			for _, card in ipairs(cards) do
				card:hide()
				self.opponent_card_holder:add_card(card)
			end
		end
	end)

	-- END ATTACK EVENT
	ws.subscribe(ws.EVENT_END_ATTACK, function(response)
		log_v("----------------------------------------")
		hide_action_button(self)
		if response.state.attacking_id == self.my_id then
			self.my_role = ROLE.ATTACKER
		else
			self.my_role = ROLE.DEFENDER
		end

		-- Get cards from deck
		if response.state.me.taken_cards then
			for _, card in ipairs(response.state.me.taken_cards) do
				local user_card = self.deck:get_card()
				user_card:init(card.suit, card.rank)
				user_card:show()
				self.my_card_holder:add_card(user_card)
			end
		end
		for _ = 1, r_utils.get_opponent(response.state).taken_cards_length do
			local user_card = self.deck:get_card()
			self.opponent_card_holder:add_card(user_card)
		end

		self.table:clean()
	end)

	ws.on_connect = function()
		ws.send_command(ws.new_ready_command(), function() end)
	end

	ws.on_disconnect = function()
		msg.post(p.loader, "load_start_menu")
	end
end

function update(self, dt)
	self.my_card_holder:on_update(dt)
	self.opponent_card_holder:on_update(dt)
end

function on_input(self, action_id, action)
	self.my_card_holder:on_input(action_id, action)
	self.opponent_card_holder:on_input(action_id, action)

	if action_id == hash("touch") then
		if self.taken_card then
			go.set_position(vmath.vector3(action.x, action.y, 0), self.taken_card.url)
		end
		if action.released and self.taken_card then
			if self.my_role == ROLE.ATTACKER then
				if self.table:pick(action.x, action.y) then
					self.table:add_card(self.taken_card)
					ws.send_command(ws.new_attack_command(self.taken_card), function(response)
						if response.error == ws.ERROR_EMPTY then
						else
							local suit = response.command.card.suit
							local rank = response.command.card.rank
							local card = self.table:get_card(suit, rank)
							if card == nil then
								log_v("Not found card on table S:" .. suit .. " R:" .. rank)
								return
							end
							local card_holder = get_card_holder_by_user_id(self, card.owner_id)
							card_holder:add_card(card)
						end
					end)
				else
					log_v("not table pick")
					self.my_card_holder:add_card(self.taken_card)
				end
			elseif self.my_role == ROLE.DEFENDER then
				local i = self.table:pick_card(action.x, action.y)
				if i ~= -1 then
					self.table:beat_off(self.taken_card, i)
					ws.send_command(ws.new_defend_command(self.taken_card, self.table.cards[i]), function(response)
						local user_card = response.command.user_card
						if response.error == ws.ERROR_EMPTY then
						else
							local card = self.table:get_beat_off_card(user_card.suit, user_card.rank)
							return_card_to_owner(self, card)
						end
					end)
				else
					return_card_to_owner(self, self.taken_card)
				end
			else
				return_card_to_owner(self, self.taken_card)
			end
			self.taken_card = nil
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("action_button_pressed") then
		if self.button_action ~= nil then
			self.button_action(self)
		end
	end
end
function on_start(self, response)
	local game_state = response.state

	-- Create user cards
	for _, card in ipairs(game_state.me.cards) do
		local user_card = Card.create(card.suit, card.rank, self.my_id)
		user_card:show()
		self.my_card_holder:add_card(user_card)
	end

	-- Create opponent cards
	for _ = 1, r_utils.get_opponent(game_state).card_length do
		local opponent_card = Card.create(1, 6, self.opponent_id)
		self.opponent_card_holder:add_card(opponent_card)
	end

	-- Init deck
	self.deck:init(game_state.deck_length, game_state.trump.suit, game_state.trump.rank)
end

function get_attacker_card(self, suit, rank)
	if self.my_role == ROLE.ATTACKER then
		local card = self.my_card_holder:get_card(suit, rank)
		return card
	else
		local card = self.opponent_card_holder:get_first_card()
		card:init(suit, rank)
		return card
	end
end

function get_defender_card(self, suit, rank)
	if self.my_role == ROLE.DEFENDER then
		local card = self.my_card_holder:get_card(suit, rank)
		return card
	else
		local card = self.opponent_card_holder:get_first_card()
		card:init(suit, rank)
		return card
	end
end

function get_card_holder_by_user_id(self, user_id)
	if self.my_id == user_id then
		return self.my_card_holder
	elseif self.opponent_id == user_id then
		return self.opponent_card_holder
	end
end

function return_card_to_owner(self, card)
	local card_holder = get_card_holder_by_user_id(self, card.owner_id)
	card_holder:add_card(card)
end

function show_take_all_cards_button(self)
	msg.post(game_ui, "show_action_button", { text = "Взять карты" })
	self.button_action = function()
		ws.send_command(ws.new_take_all_cards_command(), function() end)
	end
end

function show_end_game_button(self)
	msg.post(game_ui, "show_action_button", { text = "Завершить атаку" })
	self.button_action = function()
		ws.send_command(ws.new_end_attack_command(), function() end)
	end
end

function hide_action_button(self)
	msg.post(game_ui, "hide_action_button")
end
