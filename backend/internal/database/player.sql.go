// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
insert into player (name, age, rating)
values ($1, $2, 0)
returning id
`

type CreatePlayerParams struct {
	Name string
	Age  int16
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.Name, arg.Age)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getPlayerById = `-- name: GetPlayerById :one
select id, name, age, rating from player where id = $1
`

func (q *Queries) GetPlayerById(ctx context.Context, id pgtype.UUID) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayerById, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Age,
		&i.Rating,
	)
	return i, err
}

const updatePlayerRating = `-- name: UpdatePlayerRating :one
update player
   set rating = $2
 where id = $1
returning rating
`

type UpdatePlayerRatingParams struct {
	ID     pgtype.UUID
	Rating int32
}

func (q *Queries) UpdatePlayerRating(ctx context.Context, arg UpdatePlayerRatingParams) (int32, error) {
	row := q.db.QueryRow(ctx, updatePlayerRating, arg.ID, arg.Rating)
	var rating int32
	err := row.Scan(&rating)
	return rating, err
}
