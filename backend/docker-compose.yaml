services:

  game:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: game
    ports:
      - 127.0.0.1:7077:7077
    environment:
      RABBITMQ_URL: "amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@${RABBIT_HOST}:${RABBIT_PORT}/"
      REDIS_URL: "redis://:${REDIS_PASS}@redis:6379/0"
      JWT_PUBLIC: ${JWT_PUBLIC}
      PLAYERS_URL: "players:9090"
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  game-manager:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        SERVICE_NAME: game-manager
    ports:
      - 127.0.0.1:7070:7070
    environment:
      RABBITMQ_URL: "amqp://${RABBIT_USER}:${RABBIT_PASSWORD}@${RABBIT_HOST}:${RABBIT_PORT}/"
      JWT_PUBLIC: ${JWT_PUBLIC}
      PLAYERS_URL: "players:9090"
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  auth:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        PORT: 8080
        SERVICE_NAME: auth
    ports:
      - 127.0.0.1:8080:8080
    environment:
      JWT_PRIVATE: ${JWT_PRIVATE}
      DATABASE_URL: "user=${DB_USER} password=${DB_PASS} dbname=${DB_NAME} host=database sslmode=disable"
      PLAYERS_URL: "players:9090"
    depends_on:
      database:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      players:
        condition: service_started

  players:
    build:
      context: .
      dockerfile: Dockerfile.service
      args:
        PORT: 9090
        SERVICE_NAME: players
    environment:
      GRPC_PORT: "9090"
      JWT_PUBLIC: ${JWT_PUBLIC}
      DATABASE_URL: "user=${DB_USER} password=${DB_PASS} dbname=${DB_NAME} host=database sslmode=disable"
    depends_on:
      database:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  redis:
   image: redis:7.4-alpine3.21
   restart: unless-stopped
   environment:
     REDIS_PASSWORD: ${REDIS_PASS}
   healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 5
  
  rabbitmq:
    image: rabbitmq:3.13.7-management
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 15s
      timeout: 10s
      retries: 4

  database:
    image: postgres:17.4-alpine3.21
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - 127.0.0.1:6969:5432
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "$DB_NAME"]
      retries: 10
      interval: 5s
      timeout: 5s
      start_period: 80s

  migrate:
      build:
        dockerfile: Dockerfile.goose        
      depends_on:
        database:
          condition: service_healthy
      volumes:
        - ./migrations:/migrations
      environment:
        GOOSE_DRIVER: postgres
        GOOSE_DBSTRING: "postgres://${DB_USER}:${DB_PASS}@database:5432/${DB_NAME}"
        GOOSE_MIGRATION_DIR: /migrations
      command:
        - "./goose"
        - "up"

volumes:
  database-data:
