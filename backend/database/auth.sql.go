// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmail = `-- name: CheckEmail :one
select count(*) from player_auth
 where email = $1
 limit 1
`

func (q *Queries) CheckEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, checkEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuth = `-- name: CreateAuth :one
insert into player_auth (player_id, email, password)
values ($1, $2, $3)
returning id
`

type CreateAuthParams struct {
	PlayerID pgtype.UUID
	Email    string
	Password string
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createAuth, arg.PlayerID, arg.Email, arg.Password)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getAuthByEmail = `-- name: GetAuthByEmail :one
select id, player_id, email, password from player_auth
 where email = $1
 limit 1
`

func (q *Queries) GetAuthByEmail(ctx context.Context, email string) (PlayerAuth, error) {
	row := q.db.QueryRow(ctx, getAuthByEmail, email)
	var i PlayerAuth
	err := row.Scan(
		&i.ID,
		&i.PlayerID,
		&i.Email,
		&i.Password,
	)
	return i, err
}
